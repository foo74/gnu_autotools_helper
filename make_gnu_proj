#!/bin/sh

###################################################################################################
# Script for creating a template autotools project.
# Written by Foo74, June 10, 2016.
#
# Inspiration from the following:
# - AUTOTOOLS - A practitioner's guide to GNU Autoconf, Automake, and Libtool by John Calcote.
# - http://mij.oltrelinux.com/devel/autoconf-automake/
###################################################################################################

# Set the package name, version, and bug email. 
PACKAGE_NAME="my_cool_package2"
VERSION="0.0.1"
BUG_EMAIL="none@none.com"


# If the project directory already exists, return an error.
if [ -d "$1" ]; then
	echo "\n\nERROR: directory '$1' already exists!\n\n"
	exit
fi

# If the command was run without a project directory arg then error and print usage.
if [ -z "$1" ]; then
	echo "\n\nERROR: Root directory required!"
	echo "\nUSAGE: ./make_proj <root_folder_name>"
	echo "\nEXAMPLE: ./make_proj foo\n\n"

# Otherwise make the autotools project.
else

# Output some information about the script starting.
	echo "\n\nGNU Coding Standards (GCS) Compliant Project Template"

# Make the root project directory.
	echo -n "\nMaking '$1' root project directory..."
	mkdir $1
	echo " done"

# Make the subdirectory to hold code sources.
	echo -n "Making '$1/src' subdirectory..."
	mkdir $1/src
	echo " done"

# Add a template main.c source file.
	echo -n "Building $1/src/main.c stub..."
	cat <<- EOF > $1/src/main.c
		#include "main.h"

		int main()
		{
			printf("stubby...");

			return 0;
		}
		EOF
	echo " done"

# Add a template main.h header file.
	echo -n "Building $1/src/main.h stub..."
	cat <<- EOF > $1/src/main.h
		/* Add includes... */
		#include <stdio.h>
		EOF
	echo " done"

# Make the subdirectory to hold project docs.
	echo -n "Making '$1/doc' subdirectory..."
	mkdir $1/doc
	echo " done"

# Make the subdirectory to hold the man pages.
	echo -n "Making '$1/man' subdirectory..."
	mkdir $1/man
	echo " done"

# Make the subdirectory to hold scripts (interpretted files).
	echo -n "Making '$1/scripts' subdirectory..."
	mkdir $1/scripts
	echo " done"

# Make the subdirectory to hold example files.
	echo -n "Making '$1/examples' subdirectory..."
	mkdir $1/examples
	echo " done"

# Add the NEWS file which is required by GNU Coding Standards (GCS).
	echo -n "Making NEWS file..."
	touch $1/NEWS
	echo " done"

# Add the README file which is required by GNU Coding Standards (GCS).
	echo -n "Making README file..."
	touch $1/README
	echo " done"

# Add the AUTHORS file which is required by GNU Coding Standards (GCS).
	echo -n "Making AUTHORS file..."
	touch $1/AUTHORS
	echo " done"

# Add the ChangeLog file which is required by GNU Coding Standards (GCS).
	echo -n "Making ChangeLog file..."
	touch $1/ChangeLog
	echo " done"

# Build the Makefile.am file with the sources. Just src for now.
	echo -n "Building Makefile.am..."
	cd $1; cat <<- EOF > Makefile.am
		SUBDIRS = src
		EOF
	echo " done"

# Build the Makefile.am file for the src directory.
	echo -n "Building src/Makefile.am..."
	cat <<- EOF > src/Makefile.am
		# Flags to pass to compiler and linker.
		AM_CFLAGS = -Wall -g -std=c99 -O2
		AM_LDFLAGS =
		# List the binaries and their sources.
		bin_PROGRAMS = main
		main_SOURCES = main.c main.h
		# Location to install below installs in ($PREFIX)/bin or ($PREFIX)/sbin
		EOF
	echo " done"

# Build the Makefile.am file for the doc directory.
	echo -n "Building doc/Makefile.am..."
	cat <<- EOF > doc/Makefile.am
		# Nothing here yet.
		EOF
	echo " done"

# Build the Makefile.am file for the man directory.
	echo -n "Building man/Makefile.am..."
	cat <<- EOF > man/Makefile.am
		# Nothing here yet.
		EOF
	echo " done"

# Build the Makefile.am file for the scripts directory.
	echo -n "Building scripts/Makefile.am..."
	cat <<- EOF > scripts/Makefile.am
		# Nothing here yet.
		EOF
	echo " done"

# Build the Makefile.am file for the examples directory.
	echo -n "Building examples/Makefile.am..."
	cat <<- EOF > examples/Makefile.am
		# Nothing here yet.
		EOF
	echo " done"

# Run autoscan to build an initial configure file.
	echo -n "Running 'autoscan'..."
	autoscan
	echo " done"

# Move the result, configure.scan, to configure.ac.
	echo -n "Moving configure.scan to configure.ac..."
	mv configure.scan configure.ac
	echo " done"

# Add the AM_INIT_AUTOMAKE macro to enable automake.
	echo -n "Insert AM_INIT_AUTOMAKE into configure.ac..."
	sed -i "/AC_INIT/aAM_INIT_AUTOMAKE" configure.ac
	echo " done"

# Add the package name.
	echo -n "Adjusting package name in AC_INIT in configure.ac..."
	sed -i "s/FULL-PACKAGE-NAME/$PACKAGE_NAME/g" configure.ac
	echo " done"

# Add the version.
	echo -n "Adjusting version in AC_INIT in configure.ac..."
	sed -i "s/VERSION/$VERSION/g" configure.ac
	echo " done"

# Add the bug email address.
	echo -n "Adjusting bug report address in AC_INIT in configure.ac..."
	sed -i "s/BUG-REPORT-ADDRESS/$BUG_EMAIL/g" configure.ac
	echo " done"

# Run aclocal to prep automake macros.
	echo -n "Running aclocal..."
	aclocal
	echo " done"

# Run autoreconf with the --install option to create missing files.
# Result is the configure file users will run.
	echo -n "Running autoreconf --install..."
	autoreconf --install
	echo " done"

# Run automake with --add-missing to add missing files and also
# --copy to create copies of template files instead of sym links.
# Result is the Makefile that users will use.
	echo -n "Running automake --add-missing --copy..."
	automake --add-missing --copy
	echo " done"

	echo "\n\n"
fi
